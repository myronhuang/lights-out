{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","yIndex","xIndex","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","nRows","nCols","chanceLightStartsOn","handleReset","rand","length","row","i","Math","random","push","y","x","updatedBoard","setState","curState","forEach","cell","flipCell","every","includes","console","log","gameBoard","map","key","shortid","generate","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a17dffa4.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n//Single cell on board\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.yIndex, this.props.xIndex);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport shortid from \"shortid\";\nimport winnableGrid from './winnable-grid.js'\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.5 //default 0.5: each cell has a 0.5 chance of being lit initially\n  }\n\n  constructor(props) {\n    super(props);\n    //set initial state\n    this.state ={\n      hasWon: false, //boolean, true when board is fully off (unlit)\n      board: this.createBoard(this.props.nRows, \n                              this.props.nCols, \n                              this.props.chanceLightStartsOn) //2D array, lit: true, unlit: false\n    };\n    this.flipCellsAroundMe = this.flipCellsAroundMe.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit \n        - nRows: Integer number of rows the board will have\n        - nCols: Integer number of columns the board will have\n        - chanceLightStartsOn: Float number representing chance that any one cell is set as lit\n  */\n\n  createBoard(nRows, nCols, chanceLightStartsOn) {\n    let board = [];\n    let rand = 0;\n    while(board.length < nRows){\n      let row = [];\n      for(let i = 0; i < nCols; i++ ){\n        rand = Math.random();\n        row.push(rand < chanceLightStartsOn ? true : false);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCell(y, x) {\n    // if this coord is actually on board, flip it\n    let {nCols, nRows} = this.props;\n    let updatedBoard = this.state.board;\n    if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n      updatedBoard[y][x] = !updatedBoard[y][x];\n      this.setState(curState => ({\n        board: curState.board = updatedBoard\n      }));\n  }\n}\n\n  flipCellsAroundMe(y, x) {\n    //[selected cell, cell above, cell below, cell on the left, cell on the right]\n    let cells = [[y, x],[y-1, x], [y+1, x], [y, x-1], [y, x+1]];\n    //for each cell, run flip cell\n    cells.forEach(cell => this.flipCell(cell[0], cell[1]));\n\n    if(this.state.board.every(row => !row.includes(true))){\n      this.setState({\n        hasWon: true\n      })\n      console.log(\"Winner!\")\n    }\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n  handleReset() {\n    this.setState(curState => ({\n      board:  curState.board = this.createBoard(this.props.nRows, \n                               this.props.nCols, \n                               this.props.chanceLightStartsOn),\n      hasWon: curState.hasWon = false\n    }));\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n      const gameBoard = this.state.board.map((row, yIndex) => \n                                              <tr key={shortid.generate()}>{row.map((cell, xIndex) => \n                                                            <Cell \n                                                              key={shortid.generate()}\n                                                              isLit={cell}\n                                                              yIndex={yIndex}\n                                                              xIndex={xIndex}\n                                                              flipCellsAroundMe={this.flipCellsAroundMe}\n                                                            />)}\n                                              </tr>);\n      return (\n        <div className=\"Board-container\">\n          { this.state.hasWon ? \n            (<div className='Board-win'>\n              <span className='lights'>You</span>\n              <span className='out'>Win!</span>\n            </div>)\n            :\n            <div>\n              <div className='Board-header'>\n                <span className='lights'>Lights</span>\n                <span className='out'>Out</span>\n              </div>\n              <div className='Board-gameboard'>\n                <table className='Board-table'>\n                  <tbody>\n                  {gameBoard}\n                  </tbody>\n                </table>\n              </div> \n            </div>\n          }\n          <div className=\"Board-actions\">\n            <span className='lights instructions'>Instructions</span>\n            <span onClick={this.handleReset} className='out new-grid'>New Grid</span>\n          </div>\n        </div>\n      )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport shortid from 'shortid';\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <div className='App-board'>\n          <Board key={shortid.generate()}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}